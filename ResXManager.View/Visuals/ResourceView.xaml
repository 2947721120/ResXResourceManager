<UserControl x:Class="tomenglertde.ResXManager.View.Visuals.ResourceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="700"
             xmlns:dgx="urn:tom-englert.de/DataGridExtensions"
             xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework"
             xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ix="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:model="urn:ResXManager.Model"
             xmlns:toms="urn:TomsToolbox"
             xmlns:properties="clr-namespace:tomenglertde.ResXManager.View.Properties"
             xmlns:converters="clr-namespace:tomenglertde.ResXManager.View.Converters"
             xmlns:columnHeaders="clr-namespace:tomenglertde.ResXManager.View.ColumnHeaders"
             xmlns:behaviors="clr-namespace:tomenglertde.ResXManager.View.Behaviors"
             xmlns:tools="clr-namespace:tomenglertde.ResXManager.View.Tools"
             xmlns:infrastructure="urn:ResXManager.Infrastructure"
             xmlns:visuals="clr-namespace:tomenglertde.ResXManager.View.Visuals"
             xmlns:view="clr-namespace:tomenglertde.ResXManager.View"
             x:Name="LayoutRoot"
             d:DataContext="{d:DesignInstance visuals:ResourceViewModel}">
  <UserControl.Resources>

    <Color x:Key="HighlightColor">#FFE3E3</Color>
    <SolidColorBrush x:Key="HighlightBrush" Color="{StaticResource HighlightColor}"/>
    <LinearGradientBrush x:Key="HatchBrush" StartPoint="0,0" EndPoint="4,4" SpreadMethod="Repeat" MappingMode="Absolute">
      <GradientStop Offset="0" Color="{StaticResource HighlightColor}" />
      <GradientStop Offset="0.75" Color="{StaticResource HighlightColor}" />
      <GradientStop Offset="0.75" Color="DarkGray" />
      <GradientStop Offset="1" Color="DarkGray" />
    </LinearGradientBrush>

    <toms:ConfirmedCommandConverter x:Key="DeleteCommandConverter" Executing="DeleteCommandConverter_Executing" />
    <toms:ConfirmedCommandConverter x:Key="CutCommandConverter" Executing="CutCommandConverter_Executing" />
    <toms:ConfirmedCommandConverter x:Key="ImportExcelCommandConverter" Executing="ImportExcelCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="ExportExcelCommandConverter" Executing="ExportExcelCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="CreateSnapshotCommandConverter" Executing="CreateSnapshotCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="LoadSnapshotCommandConverter" Executing="LoadSnapshotCommandConverter_Executing" Error="CommandConverter_Error" />
    <toms:ConfirmedCommandConverter x:Key="ErrorHandlerCommandConverter" Error="CommandConverter_Error" />

    <Style TargetType="{x:Type Control}" x:Key="SingleSelectElementStyle">
      <Setter Property="IsEnabled" Value="False" />
      <Setter Property="Opacity" Value="0.5" />
      <Style.Triggers>
        <DataTrigger Binding="{Binding Path=SelectedItems.Count, ElementName=ListBox}" Value="1">
          <Setter Property="IsEnabled" Value="True" />
          <Setter Property="Opacity" Value="1" />
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Control}" x:Key="ToolbarCommandButtonStyle">
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" Value="0.5" />
        </Trigger>
      </Style.Triggers>
    </Style>

    <CollectionViewSource x:Key="ResourceEntitiesSource" Source="{Binding ResourceManager.FilteredResourceEntities}">
      <CollectionViewSource.SortDescriptions>
        <componentModel:SortDescription PropertyName="ProjectName" />
        <componentModel:SortDescription PropertyName="RelativePath" />
        <componentModel:SortDescription PropertyName="BaseName" />
      </CollectionViewSource.SortDescriptions>
      <CollectionViewSource.GroupDescriptions>
        <PropertyGroupDescription PropertyName="ProjectName" />
      </CollectionViewSource.GroupDescriptions>
    </CollectionViewSource>

    <CollectionViewSource x:Key="GroupedResourceTableEntriesSource" Source="{Binding ResourceManager.ResourceTableEntries}">
      <CollectionViewSource.GroupDescriptions>
        <PropertyGroupDescription PropertyName="Owner" />
      </CollectionViewSource.GroupDescriptions>
    </CollectionViewSource>

  </UserControl.Resources>

  <UserControl.InputBindings>
    <KeyBinding Key="N" Modifiers="Control" Command="{toms:Import tools:AddNewKeyCommand}" />
    <KeyBinding Key="Insert" Modifiers="Shift" Command="{toms:Import tools:AddNewKeyCommand}" />
  </UserControl.InputBindings>

  <Grid FocusManager.FocusedElement="{Binding ElementName=DataGrid}">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="Auto" MinWidth="120" />
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <DockPanel Grid.Column="0">
      <Grid DockPanel.Dock="Top" Background="{x:Static windows:SystemColors.MenuBrush}">
        <DockPanel Margin="0,5">
          <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
            <Decorator Width="16" />
            <CheckBox VerticalAlignment="Center" IsChecked="{Binding ResourceManager.AreAllFilesSelected}" IsThreeState="True" />
            <Decorator Width="7" />
          </StackPanel>
          <Border Background="{x:Static SystemColors.WindowBrush}">
            <DockPanel>
              <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                <Decorator Width="3" />
                <Path Data="M0,0 L10,0 6,4 6,9 4,9 4,4 Z" Fill="Gray"
                      VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2,0" />
              </StackPanel>
              <TextBox ToolTip="{x:Static properties:Resources.ResourceFilterToolTip}" BorderThickness="0"
                       Text="{Binding ResourceManager.EntityFilter, UpdateSourceTrigger=PropertyChanged}" />
            </DockPanel>
          </Border>
        </DockPanel>
      </Grid>
      <ListBox x:Name="ListBox" ItemsSource="{Binding Source={StaticResource ResourceEntitiesSource}}"
               Margin="5" BorderThickness="0" SelectionMode="Extended"
               toms:MultiSelectorExtensions.SelectionBinding="{Binding ResourceManager.SelectedEntities}"
               ContextMenu="{toms:CompositeContextMenu RegionId={x:Static infrastructure:RegionId.ProjectListContextMenu} }">
        <ListBox.ItemTemplate>
          <DataTemplate DataType="model:ResourceEntity">
            <StackPanel ToolTip="{Binding Path=Directory, Mode=OneWay}" Margin="5,2" HorizontalAlignment="Left" Orientation="Horizontal">
              <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Focusable="False" />
              <Decorator Width="5" />
              <TextBlock Background="Transparent" VerticalAlignment="Center">
                <Run Text="{Binding Path=RelativePath, Mode=OneWay}" /><Run Text="{Binding Path=BaseName, Mode=OneWay}" />
              </TextBlock>
              <Decorator Width="5" />
              <ContentControl>
                <i:Interaction.Behaviors>
                  <toms:ContentControlCompositionBehavior RegionId="{x:Static infrastructure:RegionId.ProjectListItemDecorator}" CompositionContext="{Binding}"/>
                </i:Interaction.Behaviors>
              </ContentControl>
            </StackPanel>
          </DataTemplate>
        </ListBox.ItemTemplate>
        <ListBox.GroupStyle>
          <GroupStyle>
            <GroupStyle.ContainerStyle>
              <Style TargetType="{x:Type GroupItem}">
                <Setter Property="Margin" Value="0,0,0,5" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                      <StackPanel Background="Transparent" d:DataContext="{d:DesignInstance GroupItem}">
                        <i:Interaction.Behaviors>
                          <behaviors:SelectGroupOnGroupHeaderClickBehavior />
                        </i:Interaction.Behaviors>
                        <TextBlock Text="{Binding Path=Name}" FontWeight="Bold" />
                        <ItemsPresenter />
                      </StackPanel>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </GroupStyle.ContainerStyle>
          </GroupStyle>
        </ListBox.GroupStyle>
      </ListBox>
    </DockPanel>

    <GridSplitter Grid.Column="1" Width="3" HorizontalAlignment="Left" VerticalAlignment="Stretch" />

    <DockPanel Grid.Column="2">
      <Border DockPanel.Dock="Bottom" BorderThickness="0,0.7,0,0" BorderBrush="{x:Static SystemColors.ControlDarkBrush}">
        <DockPanel DockPanel.Dock="Bottom" Background="{Binding Background, ElementName=DataGrid}">
          <TextBlock DockPanel.Dock="Right" VerticalAlignment="Center" ToolTip="{x:Static properties:Resources.SelectedTotalToolTip}">
            <Run Text="{Binding ResourceManager.SelectedTableEntries.Count, Mode=OneWay}" /><Run Text="/" /><Run Text="{Binding ResourceManager.ResourceTableEntries.Count, Mode=OneWay}" /><Run Text="  " />
          </TextBlock>
          <Control Focusable="False">
            <Control.Resources>
              <DataTemplate DataType="{x:Type model:ResourceEntity}">
                <TextBlock>
                  <Run Text="{Binding Path=BaseName, Mode=OneWay}" FontWeight="Bold" />
                  (<Run Text="{Binding Path=Directory, Mode=OneWay}" />)
                </TextBlock>
              </DataTemplate>
              <DataTemplate DataType="{x:Type model:ResourceTableEntry}">
                <TextBlock>
                  <Run Text="{Binding Path=Key, Mode=OneWay}" Foreground="Black" />:
                  <Run Text="{Binding Path=Owner.BaseName, Mode=OneWay}" FontWeight="Bold" />
                  (<Run Text="{Binding Path=Owner.Directory, Mode=OneWay}" />)
                </TextBlock>
              </DataTemplate>
            </Control.Resources>
            <Control.Template>
              <ControlTemplate>
                <ContentControl x:Name="footerContent" Foreground="Gray" Margin="5" Focusable="False">
                  <TextBlock Text="{x:Static properties:Resources.MultipleSelection}" />
                </ContentControl>
                <ControlTemplate.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding SelectedItems.Count, ElementName=DataGrid}" Value="0" />
                      <Condition Binding="{Binding SelectedItems.Count, ElementName=ListBox}" Value="0" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Content" TargetName="footerContent" Value="{x:Static properties:Resources.NoSelection}" />
                  </MultiDataTrigger>
                  <DataTrigger Binding="{Binding SelectedItems.Count, ElementName=ListBox}" Value="1">
                    <Setter Property="Content" TargetName="footerContent" Value="{Binding SelectedItem, ElementName=ListBox}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding SelectedItems.Count, ElementName=DataGrid}" Value="1">
                    <Setter Property="Content" TargetName="footerContent" Value="{Binding SelectedItem, ElementName=DataGrid}" />
                  </DataTrigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Control.Template>
          </Control>
        </DockPanel>
      </Border>
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="28" MinHeight="28" />
          <RowDefinition Height="3" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <DockPanel Grid.Row="0">
          <ToolBarTray DockPanel.Dock="Left" Background="{x:Static SystemColors.MenuBarBrush}">
            <ToolBar x:Name="ToolBar" IsOverflowOpen="False" Background="{x:Static SystemColors.MenuBarBrush}" KeyboardNavigation.TabNavigation="Continue">
              <Button ToolTip="{x:Static properties:Resources.RefreshViewToolTip}" Command="{Binding ReloadCommand}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/refresh.png" />
              </Button>
              <Separator />
              <RadioButton IsChecked="True" GroupName="Grouping" ToolTip="{x:Static properties:Resources.FlatViewToolTip}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/flat.png" />
              </RadioButton>
              <RadioButton x:Name="GroupedViewButton" GroupName="Grouping" ToolTip="{x:Static properties:Resources.GroupedViewToolTip}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/grouped.png" />
              </RadioButton>
              <Separator />
              <ToggleButton x:Name="ErrorsOnlyFilterButton"
                            ToolTip="{x:Static properties:Resources.ShowOnlyMissingToolTip}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/errorFilter.png" />
              </ToggleButton>
              <ToggleButton x:Name="ColumnChooserToggleButton"
                            ToolTip="{x:Static properties:Resources.ChooseColumnsToolTip}">
                <StackPanel Orientation="Horizontal">
                  <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/columns.png" />
                  <Decorator Width="4" />
                  <Path Data="M 0 0 L 3.5 4 L 7 0 Z" Fill="Black" VerticalAlignment="Center" />
                </StackPanel>
              </ToggleButton>
              <Button ToolTip="{x:Static properties:Resources.AddLanguageToolTip}" Click="AddLanguage_Click">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/addColumns.png" />
              </Button>
              <ToggleButton ToolTip="{x:Static properties:Resources.FindCodeReferencesButtonToolTip}"
                            IsChecked="{Binding IsFindCodeReferencesEnabled, Source={x:Static properties:Settings.Default}, Mode=TwoWay}"
                            Command="{Binding ReloadCommand}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/references.png" />
              </ToggleButton>
              <ToggleButton ToolTip="{x:Static properties:Resources.IndexColumnToggleButtonToolTip}"
                            IsChecked="{Binding IsIndexColumnVisible, Source={x:Static properties:Settings.Default}, Mode=TwoWay}"
                            IsEnabled="{Binding SelectedItems.Count, ElementName=ListBox, Converter={x:Static toms:BinaryOperationConverter.Equality}, ConverterParameter=1}">
                <TextBlock Width="16" Height="16" Text="#" TextAlignment="Center" />
              </ToggleButton>
              <Separator />
              <Button ToolTip="{x:Static properties:Resources.DeleteToolTip}"
                      Style="{StaticResource ToolbarCommandButtonStyle}"
                      Command="{Binding Path=DeleteCommand, Converter={StaticResource DeleteCommandConverter}}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/delete.png" />
              </Button>
              <Button ToolTip="{x:Static properties:Resources.CutToolTip}"
                      Style="{StaticResource ToolbarCommandButtonStyle}"
                      Command="{Binding Path=CutCommand, Converter={StaticResource CutCommandConverter}}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/cut.png" />
              </Button>
              <Button ToolTip="{x:Static properties:Resources.CopyToolTip}"
                      Style="{StaticResource ToolbarCommandButtonStyle}"
                      Command="{Binding Path=CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/copy.png" />
              </Button>
              <Button ToolTip="{x:Static properties:Resources.PasteToolTip}"
                      Style="{StaticResource ToolbarCommandButtonStyle}"
                      Command="{Binding Path=PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/paste.png" />
              </Button>
              <Button ToolTip="{x:Static properties:Resources.AddKeyToolTip}"
                      Style="{StaticResource SingleSelectElementStyle}"
                      Command="{toms:Import tools:AddNewKeyCommand}">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/add.png" />
              </Button>
              <Separator />
              <Menu VerticalAlignment="Center">
                <MenuItem Padding="2">
                  <MenuItem.Header>
                    <StackPanel Orientation="Horizontal">
                      <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/excel.png" />
                      <Decorator Width="2" />
                      <Path Data="M 0 0 L 3.5 4 L 7 0 Z" Fill="Black" VerticalAlignment="Center"/>
                    </StackPanel>
                  </MenuItem.Header>
                  <MenuItem Header="{x:Static properties:Resources.ExportExcelAll}"
                            Command="{Binding ExportExcelCommand, Converter={StaticResource ExportExcelCommandConverter}}" />
                  <MenuItem Header="{x:Static properties:Resources.ExportExcelSelection}"
                            Command="{Binding ExportExcelCommand, Converter={StaticResource ExportExcelCommandConverter}}"
                            CommandParameter="{Binding ElementName=DataGrid, Converter={x:Static converters:DataGridToSelectionScopeConverter.Default}}" />
                  <MenuItem Header="{x:Static properties:Resources.ImportExcel}"
                            Command="{Binding ImportExcelCommand, Converter={StaticResource ImportExcelCommandConverter}}" />
                </MenuItem>
                <MenuItem Padding="2">
                  <MenuItem.Header>
                    <StackPanel Orientation="Horizontal" ToolTip="{Binding LoadedSnapshot}" Background="Transparent">
                      <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/snapshot.png" >
                        <Image.Style>
                          <Style TargetType="Image">
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding LoadedSnapshot}" Value="{x:Null}">
                                <Setter Property="Opacity" Value=".5"/>
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </Image.Style>
                      </Image>
                      <Decorator Width="2" />
                      <Path Data="M 0 0 L 3.5 4 L 7 0 Z" Fill="Black" VerticalAlignment="Center" />
                    </StackPanel>
                  </MenuItem.Header>
                  <MenuItem Header="{x:Static properties:Resources.CreateSnapshot}" Command="{Binding CreateSnapshotCommand, Converter={StaticResource CreateSnapshotCommandConverter}}"/>
                  <MenuItem Header="{x:Static properties:Resources.LoadSnapshot}" Command="{Binding LoadSnapshotCommand, Converter={StaticResource LoadSnapshotCommandConverter}}"/>
                  <MenuItem Header="{x:Static properties:Resources.UnloadSnapshot}" Command="{Binding UnloadSnapshotCommand}"/>
                </MenuItem>
              </Menu>
              <Separator />
              <Button x:Name="LikeButton" ToolTip="{x:Static properties:Resources.LikeButtonToolTip}"
                      Tag="http://visualstudiogallery.msdn.microsoft.com/3b64e04c-e8de-4b97-8358-06c73a97cc68/view/Reviews">
                <Image SnapsToDevicePixels="True" Source="/ResXManager.View;component/Assets/like.png" />
              </Button>
              <Button x:Name="HelpButton" ToolTip="{x:Static properties:Resources.HelpButtonToolTip}"
                      Tag="https://resxresourcemanager.codeplex.com/documentation">
                <Grid Width="16" Height="16">
                  <TextBlock Text="?" FontWeight="Bold" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </Grid>
              </Button>
            </ToolBar>
          </ToolBarTray>
          <Popup IsOpen="{Binding Path=IsChecked, ElementName=ColumnChooserToggleButton, Mode=OneWay}"
                 StaysOpen="False"
                 Placement="Bottom" PlacementTarget="{Binding ElementName=ColumnChooserToggleButton}">
            <i:Interaction.Behaviors>
              <behaviors:PopupFocusManagerBehavior ToggleButton="{Binding ElementName=ColumnChooserToggleButton}" />
            </i:Interaction.Behaviors>
            <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
              <ListBox ItemsSource="{Binding Columns, ElementName=DataGrid, Converter={x:Static converters:LanguageColumnFilterConverter.Default} }"
                       SelectionMode="Multiple" KeyboardNavigation.TabNavigation="Once">
                <ListBox.ItemTemplate>
                  <DataTemplate DataType="DataGridColumn">
                    <DockPanel Margin="2">
                      <CheckBox DockPanel.Dock="Left"
                                IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                      <Decorator DockPanel.Dock="Left" Width="2" />
                      <Image DockPanel.Dock="Left"
                             Source="{Binding Path=Header.EffectiveCulture, Converter={x:Static converters:CultureToImageSourceConverter.Default}, FallbackValue={x:Null}}" />
                      <Decorator DockPanel.Dock="Left" Width="2" />
                      <Decorator DockPanel.Dock="Right" Width="3" />
                      <ContentPresenter Content="{Binding Path=Header}" VerticalAlignment="Center" />
                    </DockPanel>
                  </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemContainerStyle>
                  <Style TargetType="ListBoxItem">
                    <Setter Property="IsSelected" Value="{Binding Path=Visibility, Converter={x:Static toms:VisibilityToBooleanConverter.Default}}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="ListBoxItem">
                          <ContentPresenter />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </ListBox.ItemContainerStyle>
              </ListBox>
            </Border>
          </Popup>
          <toms:TextBoxVisibleWhiteSpaceDecorator WhiteSpaceColor="{Binding Foreground, ElementName=TextBox}" WhiteSpaceOpacity="0.4" WhiteSpaces="All">
            <TextBox x:Name="TextBox" AcceptsReturn="True" AcceptsTab="True" SpellCheck.IsEnabled="True" TextWrapping="Wrap" IsTabStop="False">
              <i:Interaction.Behaviors>
                <toms:ZoomFontSizeOnMouseWheelBehavior />
                <behaviors:SynchronizeTextBoxWithDataGridCellBehavior DataGrid="{Binding ElementName=DataGrid}" />
              </i:Interaction.Behaviors>
            </TextBox>
          </toms:TextBoxVisibleWhiteSpaceDecorator>
        </DockPanel>
        <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" />
        <DataGrid Grid.Row="2" x:Name="DataGrid" FrozenColumnCount="1"
                  HorizontalGridLinesBrush="LightGray" VerticalGridLinesBrush="LightGray" Padding="2" BorderThickness="0"
                  dgx:DataGridFilter.IsAutoFilterEnabled="True" AutoGenerateColumns="False"
                  CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False"
                  SelectionUnit="CellOrRowHeader"
                  toms:MultiSelectorExtensions.SelectionBinding="{Binding ResourceManager.SelectedTableEntries}">
          <DataGrid.Resources>

            <DataTemplate DataType="{x:Type columnHeaders:LanguageHeader}">
              <DockPanel>
                <Grid DockPanel.Dock="Left" Background="Transparent">
                  <Image x:Name="image" Stretch="None"
                         Source="{Binding Path=EffectiveCulture, Converter={x:Static converters:CultureToImageSourceConverter.Default}}" />
                </Grid>
                <Decorator x:Name="padding" DockPanel.Dock="Left" Width="4" />
                <TextBlock Text="{Binding Path=DisplayName}" TextTrimming="CharacterEllipsis" />
              </DockPanel>
            </DataTemplate>

            <DataTemplate DataType="{x:Type columnHeaders:CommentHeader}">
              <TextBlock><Run Text="{x:Static properties:Resources.CommentColumnHeader}"/><Run Text=" ("/><InlineUIContainer><Grid>
                <Image x:Name="image" Stretch="None" Margin="1,2,1,-2"
                        Source="{Binding Path=EffectiveCulture, Converter={x:Static converters:CultureToImageSourceConverter.Default}}" />
                </Grid></InlineUIContainer><Run Text=")"/>
              </TextBlock>
            </DataTemplate>

            <GroupStyle x:Key="GroupStyle">
              <GroupStyle.HeaderTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Path=Name}" Margin="5" FontWeight="Bold" />
                </DataTemplate>
              </GroupStyle.HeaderTemplate>
            </GroupStyle>

          </DataGrid.Resources>

          <DataGrid.InputBindings>
            <KeyBinding Key="Delete" Command="{Binding DeleteCommand, Converter={StaticResource DeleteCommandConverter}}" />
            <KeyBinding Key="Delete" Modifiers="Shift" Command="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}" />
            <KeyBinding Key="X" Modifiers="Control" Command="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}" />
            <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}"/>
            <KeyBinding Key="V" Modifiers="Control" Command="{Binding PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}" />
          </DataGrid.InputBindings>

          <DataGrid.ItemsPanel>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel
                ContextMenu="{toms:CompositeContextMenu {x:Static infrastructure:RegionId.ResourceTableContextMenu}}"
                DataContext="{Binding ElementName=DataGrid}"
                TextElement.FontSize="{Binding Path=(infrastructure:Appearance.TextFontSize), RelativeSource={RelativeSource Self}}">
                <i:Interaction.Behaviors>
                  <toms:ZoomFontSizeOnMouseWheelBehavior />
                </i:Interaction.Behaviors>
              </VirtualizingStackPanel>
            </ItemsPanelTemplate>
          </DataGrid.ItemsPanel>

          <DataGrid.RowStyle>
            <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsDuplicateKey}" Value="True">
                  <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
                </DataTrigger>
                <Trigger Property="IsSelected" Value="True">
                  <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </DataGrid.RowStyle>

          <DataGrid.CellStyle>
            <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">

              <Setter Property="BorderThickness" Value="0"/>
              <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
              <Setter Property="ToolTip">
                <Setter.Value>
                  <ToolTip>
                    <ItemsControl ItemsSource="{Binding Path=(tools:ColumnManager.CellAnnotations), RelativeSource={RelativeSource Mode=Self}}" />
                  </ToolTip>
                </Setter.Value>
              </Setter>

              <Style.Triggers>

                <DataTrigger Binding="{Binding Path=(tools:ColumnManager.CellAnnotations).Count, RelativeSource={RelativeSource Mode=Self}, FallbackValue=0}" Value="0">
                  <Setter Property="Background" Value="{x:Null}" />
                  <Setter Property="ToolTip" Value="{x:Null}" />
                </DataTrigger>

                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Column.Header.ColumnType, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static columnHeaders:ColumnType.Language}" />
                    <Condition Binding="{Binding Path=Content.Text, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="" />
                  </MultiDataTrigger.Conditions>
                  <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource HighlightBrush}" />
                  </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Path=(tools:ColumnManager.ResourceFileExists), RelativeSource={RelativeSource Mode=Self}}" Value="False">
                  <Setter Property="Background" Value="{StaticResource HatchBrush}" />
                  <Setter Property="ToolTip" Value="{x:Static properties:Resources.NoResourceFileForResource}" />
                </DataTrigger>

                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Column.Header.ColumnType, RelativeSource={RelativeSource Mode=Self}, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static columnHeaders:ColumnType.Language}" />
                    <Condition Binding="{Binding Path=IsInvariant}" Value="True" />
                  </MultiDataTrigger.Conditions>
                  <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="LightGray" />
                  </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <Trigger Property="IsSelected" Value="True">
                  <Setter Property="Background" Value="{x:Static SystemColors.HighlightBrush}" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </DataGrid.CellStyle>

          <DataGrid.Style>
            <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
              <Setter Property="ItemsSource" Value="{Binding ResourceManager.ResourceTableEntries}" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=GroupedViewButton}" Value="True">
                  <Setter Property="ItemsSource" Value="{Binding Source={StaticResource GroupedResourceTableEntriesSource}}" />
                  <Setter Property="toms:StyleBindings.GroupStyle" Value="{StaticResource GroupStyle}" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </DataGrid.Style>

          <i:Interaction.Behaviors>
            <dgx:BeginEditOnCtrlEnterBehavior />
            <dgx:DisableTargetWhileEditingBehavior Target="{Binding ElementName=ToolBar}" />
            <dgx:ExtendedStarSizeBehavior />
            <behaviors:ShowErrorsOnlyBehavior x:Name="ShowErrorsOnlyBehavior" ToggleButton="{Binding ElementName=ErrorsOnlyFilterButton}" />
            <behaviors:DataGridTryBeginEditBehavior />
          </i:Interaction.Behaviors>

          <i:Interaction.Triggers>
            <ix:PropertyChangedTrigger Binding="{Binding LoadedSnapshot}">
              <ix:PropertyChangedTrigger.Actions>
                <ix:CallMethodAction TargetObject="{Binding ElementName=ShowErrorsOnlyBehavior}" MethodName="Refresh"/>
              </ix:PropertyChangedTrigger.Actions>
            </ix:PropertyChangedTrigger>
          </i:Interaction.Triggers>
        </DataGrid>
      </Grid>
    </DockPanel>
  </Grid>

  <i:Interaction.Behaviors>
    <toms:CommandRoutingBehavior CommandSource="view:DeleteCommand" CommandTarget="{Binding DeleteCommand, Converter={StaticResource DeleteCommandConverter}}" />
    <toms:CommandRoutingBehavior CommandSource="view:CutCommand" CommandTarget="{Binding CutCommand, Converter={StaticResource CutCommandConverter}}" />
    <toms:CommandRoutingBehavior CommandSource="view:CopyCommand" CommandTarget="{Binding CopyCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}"/>
    <toms:CommandRoutingBehavior CommandSource="view:PasteCommand" CommandTarget="{Binding PasteCommand, Converter={StaticResource ErrorHandlerCommandConverter}}" CommandParameter="{Binding ElementName=DataGrid}"/>
    <toms:CommandRoutingBehavior CommandSource="view:IsInvariantCommand" CommandTarget="{Binding ToggleInvariantCommand}" IsChecked="{Binding Path=SelectedItem.IsInvariant, Mode=OneWay, ElementName=DataGrid}" />
  </i:Interaction.Behaviors>
</UserControl>