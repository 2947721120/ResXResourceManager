//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tomenglertde.ResXManager.Model.Properties {
    using System;
    using System.Diagnostics.Contracts;

    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by a text template.
    // To add or remove a member, edit your .ResX file.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ResXResourceManager", "1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("tomenglertde.ResXManager.Model.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Clipboard is empty..
        /// </summary>
        public static string ClipboardIsEmpty {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ClipboardIsEmpty", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Duplicate keys in '{0}':&amp;#13;&amp;#10;{1}&amp;....
        /// </summary>
        public static string DuplicateKeyError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("DuplicateKeyError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Multiple sheets.
        /// </summary>
        public static string ExcelExport_MultipleSheets {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ExcelExport_MultipleSheets", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Single sheet.
        /// </summary>
        public static string ExcelExport_SingleSheet {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ExcelExport_SingleSheet", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Error saving file '{0}':&amp;#13;&amp;#10;{1}&amp;....
        /// </summary>
        public static string FileSaveError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("FileSaveError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to At least three columns expected..
        /// </summary>
        public static string ImportColumnMismatchError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportColumnMismatchError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Duplicate language in header..
        /// </summary>
        public static string ImportDuplicateLanguageError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportDuplicateLanguageError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Import failed. Nothing has been imported!.
        /// </summary>
        public static string ImportFailedError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportFailedError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Import failed partially. Some columns have been al....
        /// </summary>
        public static string ImportFailedPartiallyError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportFailedPartiallyError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Standard header expected..
        /// </summary>
        public static string ImportHeaderMismatchError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportHeaderMismatchError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Inconsistent usage of double quote..
        /// </summary>
        public static string ImportInconsistentDoubleQuoteError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportInconsistentDoubleQuoteError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to The language "{0}" can't be edited. The operation ....
        /// </summary>
        public static string ImportLanguageNotEditable {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportLanguageNotEditable", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to The sheet "{0}" can't be imported; there is no mat....
        /// </summary>
        public static string ImportMapSheetError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportMapSheetError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to A normalized table is expected..
        /// </summary>
        public static string ImportNormalizedTableExpected {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportNormalizedTableExpected", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Can't parse empty text..
        /// </summary>
        public static string ImportParseEmptyTextError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("ImportParseEmptyTextError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: No xml root....
        /// </summary>
        public static string InvalidResourceFileError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("InvalidResourceFileError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: Not all ent....
        /// </summary>
        public static string InvalidResourceFileNameAttributeMissingError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("InvalidResourceFileNameAttributeMissingError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: Not all ent....
        /// </summary>
        public static string InvalidResourceFileValueAttributeMissingError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("InvalidResourceFileValueAttributeMissingError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Language is not defined: {0}.
        /// </summary>
        public static string LanguageNotDefinedError {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("LanguageNotDefinedError", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Neutral.
        /// </summary>
        public static string Neutral {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("Neutral", resourceCulture) ?? string.Empty;
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to ResX Resource Manager.
        /// </summary>
        /// <remarks>
        /// @Invariant
        /// </remarks>
        public static string Title {
            get {
                Contract.Ensures(Contract.Result<string>() != null);
                return ResourceManager.GetString("Title", resourceCulture) ?? string.Empty;
            }
        }
    }

    /// <summary>
    /// Keys of all available strings in the applications resx-resources.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("ResXResourceManager", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGenerated]
    public enum StringResourceKey
    {
        /// <summary>
        ///   Looks up a localized string similar to Clipboard is empty..
        /// </summary>
        ClipboardIsEmpty,
        /// <summary>
        ///   Looks up a localized string similar to Duplicate keys in '{0}':&amp;#13;&amp;#10;{1}&amp;....
        /// </summary>
        DuplicateKeyError,
        /// <summary>
        ///   Looks up a localized string similar to Multiple sheets.
        /// </summary>
        ExcelExport_MultipleSheets,
        /// <summary>
        ///   Looks up a localized string similar to Single sheet.
        /// </summary>
        ExcelExport_SingleSheet,
        /// <summary>
        ///   Looks up a localized string similar to Error saving file '{0}':&amp;#13;&amp;#10;{1}&amp;....
        /// </summary>
        FileSaveError,
        /// <summary>
        ///   Looks up a localized string similar to At least three columns expected..
        /// </summary>
        ImportColumnMismatchError,
        /// <summary>
        ///   Looks up a localized string similar to Duplicate language in header..
        /// </summary>
        ImportDuplicateLanguageError,
        /// <summary>
        ///   Looks up a localized string similar to Import failed. Nothing has been imported!.
        /// </summary>
        ImportFailedError,
        /// <summary>
        ///   Looks up a localized string similar to Import failed partially. Some columns have been al....
        /// </summary>
        ImportFailedPartiallyError,
        /// <summary>
        ///   Looks up a localized string similar to Standard header expected..
        /// </summary>
        ImportHeaderMismatchError,
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent usage of double quote..
        /// </summary>
        ImportInconsistentDoubleQuoteError,
        /// <summary>
        ///   Looks up a localized string similar to The language "{0}" can't be edited. The operation ....
        /// </summary>
        ImportLanguageNotEditable,
        /// <summary>
        ///   Looks up a localized string similar to The sheet "{0}" can't be imported; there is no mat....
        /// </summary>
        ImportMapSheetError,
        /// <summary>
        ///   Looks up a localized string similar to A normalized table is expected..
        /// </summary>
        ImportNormalizedTableExpected,
        /// <summary>
        ///   Looks up a localized string similar to Can't parse empty text..
        /// </summary>
        ImportParseEmptyTextError,
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: No xml root....
        /// </summary>
        InvalidResourceFileError,
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: Not all ent....
        /// </summary>
        InvalidResourceFileNameAttributeMissingError,
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid RESX resource file: Not all ent....
        /// </summary>
        InvalidResourceFileValueAttributeMissingError,
        /// <summary>
        ///   Looks up a localized string similar to Language is not defined: {0}.
        /// </summary>
        LanguageNotDefinedError,
        /// <summary>
        ///   Looks up a localized string similar to Neutral.
        /// </summary>
        Neutral,
        /// <summary>
        ///   Looks up a localized string similar to ResX Resource Manager.
        /// </summary>
        /// <remarks>
        /// @Invariant
        /// </remarks>
        Title,
    }

    /// <summary>
    /// Specifies a localized description for an object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("ResXResourceManager", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [AttributeUsage(AttributeTargets.All, AllowMultiple=false)]
    public sealed class LocalizedDescriptionAttribute : System.ComponentModel.DescriptionAttribute
    {
        private readonly StringResourceKey _resourceKey;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedDescriptionAttribute"/> class.
        /// </summary>
        /// <param name="resourceKey">The resource key of the associated resource.</param>
        public LocalizedDescriptionAttribute(StringResourceKey resourceKey)
        {
            _resourceKey = resourceKey;
        }

        /// <summary>
        /// Gets the localized description from the resource id stored in this attribute.
        /// </summary>
        public override string Description
        {
            get
            {
                return Resources.ResourceManager.GetString(_resourceKey.ToString());
            }
        }
    }

    /// <summary>
    /// Specifies a localized display name for an object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("ResXResourceManager", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [AttributeUsage(AttributeTargets.All, AllowMultiple=false)]
    public sealed class LocalizedDisplayNameAttribute : System.ComponentModel.DisplayNameAttribute
    {
        private readonly StringResourceKey _resourceKey;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedDisplayNameAttribute"/> class.
        /// </summary>
        /// <param name="resourceKey">The resource key of the associated resource.</param>
        public LocalizedDisplayNameAttribute(StringResourceKey resourceKey)
        {
            _resourceKey = resourceKey;
        }

        /// <summary>
        /// Gets the localized display name from the resource id stored in this attribute.
        /// </summary>
        public override string DisplayName
        {
            get
            {
                return Resources.ResourceManager.GetString(_resourceKey.ToString());
            }
        }
    }


    /// <summary>
    /// Specifies a localized display name for an object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("ResXResourceManager", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    public sealed class LocalizedTextAttribute : global::TomsToolbox.Desktop.TextAttribute
    {
        private readonly StringResourceKey _resourceKey;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedTextAttribute"/> class.
        /// </summary>
        /// <param name="key">Any user defined key to specify the usage of this text.</param>
        /// <param name="resourceKey">The resource key of the associated resource.</param>
        public LocalizedTextAttribute(object key, StringResourceKey resourceKey)
            : base(key)
        {
            _resourceKey = resourceKey;
        }

        /// <summary>
        /// Gets the localized text from the resource id stored in this attribute.
        /// </summary>
        public override string Text
        {
            get
            {
                return Resources.ResourceManager.GetString(_resourceKey.ToString());
            }
        }
    }



}

